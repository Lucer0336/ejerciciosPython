EJERCICIO 1
#contar ocurrencias de elementos
#coleccion:lista
#descripcion:Dada una lista de palabras,crea una funcion que devulve un diccionario con la cantidad de veces que paraece cada palabra.

def contar_ocurrencias(lista_palabras):
    ocurrencias = {}
    for palabra in lista_palabras:
        if palabra in ocurrencias:
            ocurrencias[palabra] += 1
        else:
            ocurrencias[palabra] = 1
    return ocurrencias

   

2. #combinar dicccionarios
#colecccion:Diccionario
#descripcion:escribe una funcion que combine dos diccionarios,sumando los valores de las claves comunes.

dic1 = {'a':1,'b':2}
dic1 = {'a':1,'b':2}
# Salida: {'a':1,'b':5,'c':4}


def combinar_diccionarios(dic1, dic2):
    combinado = dic1.copy()  
    for clave, valor in dic2.items():
        if clave in combinado:
            combinado[clave] += valor 
        else:
            combinado[clave] = valor 
    return combinado
 
3.  #Listas de frecuencias 
#Coleccion:lista
#descripcion:Dada una lista de nuemeros,devuleve un diccionario con la frecuencia de cada numero.
#ejemplo:

numeros = [1, 1, 2, 3, 3, 3]
# Salida: {11:2, 2: 1, 3: 3}

   def invertir_tuplas(tuplas):
       return [(b, a) for a, b in tuplas]
  

4.#Filtra Palabras Largas
#Coleccion:Lista
#Descripcion:crea una funcion que reciba una lista de palabras y un numero entero,devolviendo una nueva lista con palabras que  tiene mas de ese numero de caracteres.

#Ejemplo:
palabras = ["hola", "mundo", "python", "programación"]
longitud = 5
# Salida: ["programación"]

def valor_mas_frecuente(numeros):
    frecuencia = frecuencia_numeros(numeros) 
    return max(frecuencia, key=frecuencia.get)
   

5. #Inversión de Tuplas en Lista
#Colección: Lista de Tuplas
#Descripción: Dada una lista de tuplas, crea una función que devuelva una lista con las tuplas invertidas.

#ejemplo

tuplas = [(1, 2), (3, 4), (5, 6)]
# Salida: [(2, 1), (4, 3), (6, 5)]

def es_subconjunto(conjunto1, conjunto2):
    return conjunto1.issubset(conjunto2)
-----------------------------------------------------------------------------------------------------------

6. #Encontrar el Valor Más Frecuente
#Colección: Lista
#Descripción: Dada una lista de números, crea una función que encuentre y devuelva el número que aparece con mayor frecuencia.
#Ejemplo:

numeros = [1, 2, 3, 1, 2, 1]
# Salida: 1
def valor_mas_frecuente(numeros):
    frecuencia = {}
    for num in numeros:
        if num in frecuencia:
            frecuencia[num] += 1
        else:
            frecuencia[num] = 1
    valor_frecuente = max(frecuencia, key=frecuencia.get)
    
    return valor_frecuente
-------------------------------------------------------------------------------------------------------------------------

7.#Comprobar Subconjunto
#Colección: Conjunto
#Descripción: Escribe una función que determine si un conjunto es un subconjunto de otro.
#Ejemplo:

conjunto1 = {1, 2, 3}
conjunto2 = {1, 2, 3, 4, 5}
# Salida: True

def merge_sort(lista):
    if len(lista) <= 1:
        return lista
    medio = len(lista) // 2
    izquierda = merge_sort(lista[:medio])
    derecha = merge_sort(lista[medio:])
    return merge(izquierda, derecha)

def merge(izquierda, derecha):
    resultado = []
    i = j = 0
    while i < len(izquierda) and j < len(derecha):
        if izquierda[i] < derecha[j]:
            resultado.append(izquierda[i])
            i += 1
        else:
            resultado.append(derecha[j])
            j += 1
    resultado.extend(izquierda[i:])
    resultado.extend(derecha[j:])
    return resultado
--------------------------------------------------------------------------------------------------------------------------
8.#Agrupación por Clave
#Colección: Lista de Diccionarios
#Descripción: Dada una lista de diccionarios que representan personas (con claves "nombre" y "edad"), agrúpalos por edad.
#Ejemplo:

personas = [{"nombre": "Ana", "edad": 25}, {"nombre": "Luis", "edad": 25}, {"nombre": "Carlos", "edad": 30}]
# Salida: {25: ['Ana', 'Luis'], 30: ['Carlos']}

def eliminar_menores(numeros, limite):
    return [num for num in numeros if num >= limite]
   -----------------------------------------------------------------------------------------------------------------------
9.#Merge Sort utilizando Listas
#Colección: Lista
#Descripción:Implementa el algoritmo Merge Sort para ordenar una lista de números.
#Ejemplo:

numeros = [5, 3, 8, 6, 2]
# Salida: [2, 3, 5, 6, 8]

def aplanar_lista(lista_de_listas):
    return [elemento for sublista in lista_de_listas for elemento in sublista]


10.#Eliminar Elementos por Condición
#Colección: Lista
#Descripción: Crea una función que reciba una lista y elimine todos los elementos que sean menores que un valor dado.
#Ejemplo:

numeros = [1, 2, 3, 4, 5]
limite = 3
# Salida: [3, 4, 5]

def calcular_mediana(numeros):
    numeros_ordenados = sorted(numeros)
    n = len(numeros_ordenados)
    medio = n // 2
    if n % 2 == 0:
        return (numeros_ordenados[medio - 1] + numeros_ordenados[medio]) / 2
    else:
        return numeros_ordenados[medio]

11.#Flatten List of Lists
#Colección: Lista de Listas
#Descripción: Dada una lista que contiene otras listas, crea una función que "aplane" la lista, es decir, devuelva una sola lista con todos los elementos.
#Ejemplo:

lista_de_listas = [[1, 2], [3, 4], [5]]
# Salida: [1, 2, 3, 4, 5]

    def duplicar_elementos(numeros):
        return [num for num in numeros for _ in range(2)]
    ---------------------------------------------------------------------------------------------------------------------

12. #Cálculo de Mediana
#Colección: Lista
#Descripción: Crea una función que calcule la mediana de una lista de números.
#Ejemplo:

numeros = [1, 3, 2, 4, 5]
# Salida: 3
    def contar_palabras(frases):
        return {i: len(frase.split()) for i, frase in enumerate(frases)}
    

13. #Duplicar Elementos en una Lista
#Colección: Lista
#Descripción: Dada una lista de números, crea una función que devuelva una nueva lista donde cada número se duplique.
#Ejemplo:

numeros = [1, 2, 3]
# Salida: [1, 1, 2, 2, 3, 3]

    def clave_maxima(diccionario):
        return max(diccionario, key=diccionario.get)
    

14. #Duplicar Elementos en una Lista
#Colección: Lista
#Descripción: Dada una lista de números, crea una función que devuelva una nueva lista donde cada número se duplique.
#Ejemplo:

numeros = [1, 2, 3]
# Salida: [1, 1, 2, 2, 3, 3]

    def encontrar_palindromos(palabras):
        return [palabra for palabra in palabras if palabra == palabra[::-1]]
    
15.#Encontrar Clave Máxima en Diccionario
#Colección: Diccionario
#Descripción: Crea una función que encuentre la clave con el valor máximo en un diccionario.
#Ejemplo:

diccionario = {'a': 10, 'b': 20, 'c': 5}
# Salida: 'b'

def clave_maxima(diccionario):
    return max(diccionario, key=diccionario.get)

16.#Palíndromos en una Lista
#Colección: Lista
#Descripción: Escribe una función que devuelva una lista de palabras que son palíndromos de una lista dada.
#Ejemplo:

palabras = ["ana", "oso", "hola", "level"]
# Salida: ["ana", "oso", "level"]

def encontrar_palindromos(palabras):
    return [palabra for palabra in palabras if palabra == palabra[::-1]]






